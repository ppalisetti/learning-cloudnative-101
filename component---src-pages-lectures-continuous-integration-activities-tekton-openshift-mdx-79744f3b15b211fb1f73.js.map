{"version":3,"sources":["webpack:///./node_modules/gatsby-theme-carbon/src/components/PageHeader/index.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/PageHeader/PageHeader.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/EditLink/index.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/EditLink/EditLink.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/PageTabs/index.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/PageTabs/PageTabs.js","webpack:///./node_modules/gatsby-theme-carbon/src/templates/Default.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/EditLink/EditLink.module.scss","webpack:///./node_modules/gatsby-theme-carbon/src/components/PageTabs/PageTabs.module.scss","webpack:///./node_modules/gatsby-theme-carbon/src/components/PageHeader/PageHeader.module.scss","webpack:///./src/pages/lectures/continuous-integration/activities/tekton/openshift.mdx"],"names":["PageHeader","title","theme","tabs","className","cx","styles","pageHeader","withTabs","length","darkMode","id","text","EditLink","relativePagePath","repositoryProp","repository","useStaticQuery","site","siteMetadata","baseUrl","subDirectory","href","branch","row","link","PageTabs","render","this","props","slug","currentTab","split","filter","Boolean","slice","pageTabs","map","tab","slugifiedTab","slugify","lower","strict","selected","currentTabRegex","RegExp","replace","key","selectedItem","listItem","to","tabsContainer","list","React","Component","Default","pageContext","children","location","Title","frontmatter","titleType","frontmatterTheme","description","keywords","interiorTheme","useMetadata","pathPrefix","pathname","Layout","homepage","pageTitle","pageDescription","pageKeywords","label","Main","padded","NextPrevious","Utils","module","exports","_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","isMDXComponent"],"mappings":"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","file":"component---src-pages-lectures-continuous-integration-activities-tekton-openshift-mdx-79744f3b15b211fb1f73.js","sourcesContent":["import PageHeader from './PageHeader';\n\nexport default PageHeader;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport styles from './PageHeader.module.scss';\n\nconst PageHeader = ({ title, theme, tabs = [] }) => (\n  <div\n    className={cx(styles.pageHeader, {\n      [styles.withTabs]: tabs.length,\n      [styles.darkMode]: theme === 'dark',\n    })}>\n    <div className=\"bx--grid\">\n      <div className=\"bx--row\">\n        <div className=\"bx--col-lg-12\">\n          <h1 id=\"page-title\" className={styles.text}>\n            {title}\n          </h1>\n        </div>\n      </div>\n    </div>\n  </div>\n);\n\nPageHeader.propTypes = {\n  /**\n   * Specify the title for the page\n   */\n  title: PropTypes.node,\n};\n\nexport default PageHeader;\n","import EditLink from './EditLink';\n\nexport default EditLink;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { graphql, useStaticQuery } from 'gatsby';\n\nimport { link, row } from './EditLink.module.scss';\n\nconst EditLink = ({ relativePagePath, repository: repositoryProp }) => {\n  const {\n    site: {\n      siteMetadata: { repository },\n    },\n  } = useStaticQuery(graphql`\n    query REPOSITORY_QUERY {\n      site {\n        siteMetadata {\n          repository {\n            baseUrl\n            subDirectory\n            branch\n          }\n        }\n      }\n    }\n  `);\n\n  const { baseUrl, subDirectory, branch } = repositoryProp || repository;\n\n  const href = `${baseUrl}/edit/${branch}${subDirectory}/src/pages${relativePagePath}`;\n\n  return baseUrl ? (\n    <div className={`bx--row ${row}`}>\n      <div className=\"bx--col\">\n        <a className={link} href={href}>\n          Edit this page on GitHub\n        </a>\n      </div>\n    </div>\n  ) : null;\n};\n\nEditLink.propTypes = {\n  repository: PropTypes.shape({\n    baseUrl: PropTypes.string,\n    subDirectory: PropTypes.string,\n    branch: PropTypes.string,\n  }),\n  relativePagePath: PropTypes.string,\n};\n\nexport default EditLink;\n","import PageTabs from './PageTabs';\n\nexport default PageTabs;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'gatsby';\nimport slugify from 'slugify';\nimport cx from 'classnames';\n\nimport {\n  tabsContainer,\n  list,\n  selectedItem,\n  listItem,\n  link,\n} from './PageTabs.module.scss';\n\nexport default class PageTabs extends React.Component {\n  render() {\n    const { tabs, slug } = this.props;\n    const currentTab = slug.split('/').filter(Boolean).slice(-1)[0];\n\n    const pageTabs = tabs.map((tab) => {\n      const slugifiedTab = slugify(tab, { lower: true, strict: true });\n      const selected = slugifiedTab === currentTab;\n      // matches with or without trailing slash: /?\n      // matches with or without hash link: (#.*)?\n      const currentTabRegex = new RegExp(`${currentTab}/?(#.*)?$`);\n      const href = slug.replace(currentTabRegex, slugifiedTab);\n      return (\n        <li key={tab} className={cx({ [selectedItem]: selected }, listItem)}>\n          <Link className={link} to={`${href}`}>\n            {tab}\n          </Link>\n        </li>\n      );\n    });\n\n    return (\n      <div className={tabsContainer}>\n        <div className=\"bx--grid\">\n          <div className=\"bx--row\">\n            <div className=\"bx--col-lg-12 bx--col-no-gutter\">\n              <nav>\n                <ul className={list}>{pageTabs}</ul>\n              </nav>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nPageTabs.propTypes = {\n  tabs: PropTypes.array,\n  slug: PropTypes.string,\n};\n","import React from 'react';\nimport slugify from 'slugify';\nimport { useStaticQuery, graphql } from 'gatsby';\n\nimport Utils from '../components/Utils';\nimport Layout from '../components/Layout';\nimport PageHeader from '../components/PageHeader';\nimport EditLink from '../components/EditLink';\nimport NextPrevious from '../components/NextPrevious';\nimport PageTabs from '../components/PageTabs';\nimport Main from '../components/Main';\nimport useMetadata from '../util/hooks/useMetadata';\n\nconst Default = ({ pageContext, children, location, Title }) => {\n  const { frontmatter = {}, relativePagePath, titleType } = pageContext;\n  const {\n    tabs,\n    title,\n    theme: frontmatterTheme,\n    description,\n    keywords,\n  } = frontmatter;\n\n  const { interiorTheme } = useMetadata();\n\n  // get the path prefix if it exists\n  const {\n    site: { pathPrefix },\n  } = useStaticQuery(graphql`\n    query PATH_PREFIX_QUERY {\n      site {\n        pathPrefix\n      }\n    }\n  `);\n\n  // let gatsby handle prefixing\n  const slug = pathPrefix\n    ? location.pathname.replace(pathPrefix, '')\n    : location.pathname;\n\n  const getCurrentTab = () => {\n    if (!tabs) return '';\n    return (\n      slug.split('/').filter(Boolean).slice(-1)[0] ||\n      slugify(tabs[0], { lower: true })\n    );\n  };\n\n  const currentTab = getCurrentTab();\n\n  const theme = frontmatterTheme || interiorTheme;\n\n  return (\n    <Layout\n      tabs={tabs}\n      homepage={false}\n      theme={theme}\n      pageTitle={title}\n      pageDescription={description}\n      pageKeywords={keywords}\n      titleType={titleType}>\n      <PageHeader\n        title={Title ? <Title /> : title}\n        label=\"label\"\n        tabs={tabs}\n        theme={theme}\n      />\n      {tabs && <PageTabs slug={slug} tabs={tabs} currentTab={currentTab} />}\n      <Main padded>\n        {children}\n        <EditLink relativePagePath={relativePagePath} />\n      </Main>\n      <NextPrevious\n        pageContext={pageContext}\n        location={location}\n        slug={slug}\n        tabs={tabs}\n        currentTab={currentTab}\n      />\n      <Utils />\n    </Layout>\n  );\n};\n\nexport default Default;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"bxTextTruncateEnd\":\"EditLink-module--bx--text-truncate--end--2pqje\",\"bxTextTruncateFront\":\"EditLink-module--bx--text-truncate--front--3_lIE\",\"link\":\"EditLink-module--link--1qzW3\",\"row\":\"EditLink-module--row--1B9Gk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"bxTextTruncateEnd\":\"PageTabs-module--bx--text-truncate--end--267NA\",\"bxTextTruncateFront\":\"PageTabs-module--bx--text-truncate--front--3xEQF\",\"tabsContainer\":\"PageTabs-module--tabs-container--8N4k0\",\"list\":\"PageTabs-module--list--3eFQc\",\"listItem\":\"PageTabs-module--list-item--nUmtD\",\"link\":\"PageTabs-module--link--1mDJ1\",\"selectedItem\":\"PageTabs-module--selected-item--YPVr3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"bxTextTruncateEnd\":\"PageHeader-module--bx--text-truncate--end--mZWeX\",\"bxTextTruncateFront\":\"PageHeader-module--bx--text-truncate--front--3zvrI\",\"pageHeader\":\"PageHeader-module--page-header--3hIan\",\"darkMode\":\"PageHeader-module--dark-mode--hBrwL\",\"withTabs\":\"PageHeader-module--with-tabs--3nKxA\",\"text\":\"PageHeader-module--text--o9LFq\"};","import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/travis/build/ibm-cloud-architecture/learning-cloudnative-101/node_modules/gatsby-theme-carbon/src/templates/Default.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h2>{`Prerequisites`}</h2>\n    <p>{`Make sure your environment is properly setup.`}</p>\n    <p>{`Follow the instructions `}<a parentName=\"p\" {...{\n        \"href\": \"../../prerequisites#environment-setup\"\n      }}>{`here`}</a></p>\n    <h2>{`SetUp`}</h2>\n    <h3>{`Tekton CLI Installation`}</h3>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><a parentName=\"p\" {...{\n            \"href\": \"https://github.com/tektoncd/cli\"\n          }}>{`Tekton CLI`}</a>{` is command line utility used to interact with the Tekton resources.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Follow the instructions on the tekton CLI github repository `}<a parentName=\"p\" {...{\n            \"href\": \"https://github.com/tektoncd/cli#installing-tkn\"\n          }}>{`https://github.com/tektoncd/cli#installing-tkn`}</a></p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`For MacOS for example you can use brew`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{}}>{`brew tap tektoncd/tools\nbrew install tektoncd/tools/tektoncd-cli\n`}</code></pre>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Verify the Tekton cli`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{}}>{`tkn version\n`}</code></pre>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`The command should show a result like:`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{}}>{`$ tkn version\nClient version: 0.10.0\n`}</code></pre>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`If you already have the `}<inlineCode parentName=\"p\">{`tkn`}</inlineCode>{` install you can upgrade running`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{}}>{`brew upgrade tektoncd/tools/tektoncd-cli\n`}</code></pre>\n      </li>\n    </ul>\n    <h3>{`Tekton Pipelines Installation`}</h3>\n    <ul>\n      <li parentName=\"ul\">{`To deploy the Tekton pipelines:`}\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{}}>{`oc apply --filename https://raw.githubusercontent.com/ibm-cloud-architecture/learning-cloudnative-101/master/static/yamls/tekton-lab/tekton-operator.yaml\n`}</code></pre>\n      </li>\n      <li parentName=\"ul\"><strong parentName=\"li\"><em parentName=\"strong\">{`Note`}</em></strong>{`: It will take few mins for the Tekton pipeline components to be installed, you an watch the status using the command:`}\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{}}>{`oc get pods -n openshift-operators -w\n`}</code></pre>\n        {`  You can use `}<inlineCode parentName=\"li\">{`Ctrl+c`}</inlineCode>{` to terminate the watch`}</li>\n      <li parentName=\"ul\">{`A successful deployment of Tekton pipelines will show the following pods:`}\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{}}>{`NAME                                         READY   STATUS    RESTARTS   AGE\nopenshift-pipelines-operator-9cdbbb854-x9tvs   1/1     Running   0          25s\n`}</code></pre>\n      </li>\n    </ul>\n    <h2>{`Create Target Namespace`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Set the environment variable `}<inlineCode parentName=\"li\">{`NAMESPACE`}</inlineCode>{` to `}<inlineCode parentName=\"li\">{`tekton-demo`}</inlineCode>{`, if you open a new terminal remember to set this environment again`}\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{}}>{`export NAMESPACE=tekton-demo\n`}</code></pre>\n      </li>\n      <li parentName=\"ul\">{`Create a the namespace using the variable `}<inlineCode parentName=\"li\">{`NAMESPACE`}</inlineCode>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{}}>{`oc new-project $NAMESPACE\n`}</code></pre>\n      </li>\n    </ul>\n    <h2>{`Tasks`}</h2>\n    <h3>{`Task Creation`}</h3>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Create the below yaml files.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`The following snippet shows what a Tekton Task YAML looks like:`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Create the file `}<strong parentName=\"p\">{`task-test.yaml`}</strong></p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-yaml\"\n          }}>{`apiVersion: tekton.dev/v1beta1\nkind: Task\nmetadata:\n  name: java-test\nspec:\n  params:\n    - name: url\n      default: https://github.com/ibm-cloud-architecture/cloudnative_sample_app\n    - name: revision\n      default: master\n  steps:\n    - name: git-clone\n      image: alpine/git\n      script: |\n        git clone -b $(params.revision) --depth 1 $(params.url) /source\n      volumeMounts:\n        - name: source\n          mountPath: /source\n    - name: test\n      image: maven:3.3-jdk-8\n      workingdir: /source\n      script: |\n        mvn test\n        echo \"tests passed with rc=$?\"\n      volumeMounts:\n        - name: m2-repository\n          mountPath: /root/.m2\n        - name: source\n          mountPath: /source\n  volumes:\n    - name: m2-repository\n      emptyDir: {}\n    - name: source\n      emptyDir: {}\n`}</code></pre>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Each Task has the following:`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`name`}</strong>{` - the unique name using which the task can be referred`}</p>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`name - the name of the parameter`}</li>\n          <li parentName=\"ul\">{`description - the description of the parameter`}</li>\n          <li parentName=\"ul\">{`default - the default value of parameter`}</li>\n        </ul>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`Note`}</strong>{`: The `}<inlineCode parentName=\"p\">{`TaskRun`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`PipelineRun`}</inlineCode>{` could override the parameter values, if no parameter value is passed then the default value will be used.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`steps`}</strong>{` - One or more sub-tasks that will be executed in the defined order. The step has all the attributes like a Pod spec`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`volumes`}</strong>{` - the task can also mount external volumes using the volumes attribute.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`The parameters that were part of the spec inputs params can be used in the steps using the notation `}<inlineCode parentName=\"p\">{`$(<variable-name>)`}</inlineCode>{`.`}</p>\n      </li>\n    </ul>\n    <h3>{`Task Deploy`}</h3>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`The application test task could be created using the command:`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{}}>{`oc apply -f task-test.yaml -n $NAMESPACE\n`}</code></pre>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`We will use the Tekton cli to inspect the created resources`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{}}>{`tkn task ls -n $NAMESPACE\n`}</code></pre>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`The above command should list one Task as shown below:`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{}}>{`NAME        AGE\njava-test   22 seconds ago\n`}</code></pre>\n      </li>\n    </ul>\n    <h3>{`TaskRun`}</h3>\n    <ul>\n      <li parentName=\"ul\">{`The `}<a parentName=\"li\" {...{\n          \"href\": \"https://github.com/tektoncd/pipeline/blob/master/docs/taskruns.md\"\n        }}>{`TaskRun`}</a>{` is used to run a specific task independently. In the following section we will run the build-app task created in the previous step`}</li>\n    </ul>\n    <h4>{`TaskRun Creation`}</h4>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`The following snippet shows what a Tekton TaskRun YAML looks like:`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Create the file `}<strong parentName=\"p\">{`taskrun-test.yaml`}</strong></p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-yaml\"\n          }}>{`apiVersion: tekton.dev/v1beta1\nkind: TaskRun\nmetadata:\n  generateName: test-task-run-\nspec:\n  taskRef:\n    name: java-test\n  params:\n    - name: url\n      value: https://github.com/ibm-cloud-architecture/cloudnative_sample_app\n`}</code></pre>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`generateName`}</strong>{` - since the TaskRun can be run many times, in order to have unqiue name across the TaskRun ( helpful when checking the TaskRun history) we use this generateName instead of name. When Kubernetes sees generateName it will generate unquie set of characters and suffix the same to build-app-, similar to how pod names are generated`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`taskRef`}</strong>{` - this is used to refer to the Task by its name that will be run as part of this TaskRun. In this example we use build-app Task.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`As described in the earlier section that the Task inputs and outputs could be overridden via TaskRun.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`params`}</strong>{` - this are the parameter values that are passed to the task`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`The application test task(java-maven-test) could be run using the command:`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-bash\"\n          }}>{`kubectl create -f taskrun-test.yaml -n $NAMESPACE \n`}</code></pre>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`Note`}</strong>{` - As tasks will use generated name, never use `}<inlineCode parentName=\"p\">{`oc apply -f taskrun-test.yaml`}</inlineCode></p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`We will use the Tekton cli to inspect the created resources:`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-bash\"\n          }}>{`tkn tr ls -n $NAMESPACE\n`}</code></pre>\n        <p parentName=\"li\">{`  The above command should list one TaskRun as shown below:`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-bash\"\n          }}>{`NAME                       STARTED        DURATION   STATUS\ntest-task-run-q6s8c        1 minute ago   ---        Running(Pending)\n`}</code></pre>\n        <p parentName=\"li\">{`  `}<strong parentName=\"p\">{`Note`}</strong>{` - It will take few seconds for the TaskRun to show status as Running as it needs to download the container images.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`To check the logs of the Task Run using the `}<inlineCode parentName=\"p\">{`tkn`}</inlineCode>{`:`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-bash\"\n          }}>{`tkn tr logs -f --last -n $NAMESPACE\n`}</code></pre>\n        <p parentName=\"li\"><strong parentName=\"p\">{`Note`}</strong>{` - Each task step will be run within a container of its own.\nThe -f or -a allows to tail the logs from all the containers of the task. For more options run `}<inlineCode parentName=\"p\">{`tkn tr logs --help`}</inlineCode></p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`If you see the TaskRun status as Failed or Error use the following command to check the reason for error:`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-bash\"\n          }}>{`tkn tr describe --last -n $NAMESPACE\n`}</code></pre>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`If it is successful, you will see something like below.`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-bash\"\n          }}>{`tkn tr ls -n $NAMESPACE\n`}</code></pre>\n        <p parentName=\"li\">{`  The above command should list one TaskRun as shown below:`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-bash\"\n          }}>{`NAME                  STARTED          DURATION     STATUS\ntest-task-run   47 seconds ago   34 seconds   Succeeded\n`}</code></pre>\n      </li>\n    </ul>\n    <h3>{`Creating additional tasks and deploying them`}</h3>\n    <ul>\n      <li parentName=\"ul\">{`Create a Task to build a container image and push to the registry`}</li>\n      <li parentName=\"ul\">{`This task will be later used by the pipeline.`}</li>\n      <li parentName=\"ul\">{`Download the task file `}<a parentName=\"li\" {...{\n          \"href\": \"/yamls/tekton-lab/task-buildah.yaml\"\n        }}>{`task-buildah.yaml`}</a>{` to build the image, push the image to the registy:`}</li>\n      <li parentName=\"ul\">{`Create the `}<inlineCode parentName=\"li\">{`buildah`}</inlineCode>{` Task using the file and the command:`}\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{}}>{`oc apply -f task-buildah.yaml -n $NAMESPACE\n`}</code></pre>\n      </li>\n      <li parentName=\"ul\">{`Use the Tekton cli to inspect the created resources`}\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{}}>{`tkn task ls -n $NAMESPACE\n`}</code></pre>\n      </li>\n      <li parentName=\"ul\">{`The above command should list one Task as shown below:`}\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{}}>{`NAME              AGE\nbuildah            4 seconds ago\njava-test         46 minutes ago\n`}</code></pre>\n      </li>\n    </ul>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Create an environment variable for location to push the image to be build. Replace `}<inlineCode parentName=\"p\">{`NAMESPACE`}</inlineCode>{` for the dockerhub username, or IBM CR Namespace`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-bash\"\n          }}>{`export REGISTRY_SERVER=image-registry.openshift-image-registry.svc:5000\nexport IMAGE_URL=\\${REGISTRY_SERVER}/\\${NAMESPACE}/cloudnative_sample_app\necho IMAGE_URL=\\${IMAGE_URL}\n`}</code></pre>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Lets create a Task Run for `}<inlineCode parentName=\"p\">{`buildah`}</inlineCode>{` Task using the `}<inlineCode parentName=\"p\">{`tkn`}</inlineCode>{` CLI passing the inputs, outputs and service account.`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-bash\"\n          }}>{`tkn task start buildah --showlog \\\\\n  -p image=\\${IMAGE_URL} \\\\\n  -p url=https://github.com/ibm-cloud-architecture/cloudnative_sample_app \\\\\n  -s pipeline \\\\\n  -n $NAMESPACE\n`}</code></pre>\n        <p parentName=\"li\">{`  The task will start and logs will start printing automatically`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{}}>{`Taskrun started: buildah-run-vvrg2\nWaiting for logs to be available...\n`}</code></pre>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Verify the status of the Task Run`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-bash\"\n          }}>{`tkn tr ls -n $NAMESPACE\n`}</code></pre>\n        <p parentName=\"li\">{`  Output should look like this`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{}}>{`NAME                  STARTED          DURATION     STATUS\nbuildah-run-zbsrv      2 minutes ago    1 minute     Succeeded\n`}</code></pre>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`To clean up all Pods associated with all Task Runs, delete all the task runs resources`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-bash\"\n          }}>{`oc delete taskrun --all -n $NAMESPACE\n`}</code></pre>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`(Optional) Instead of starting the Task via `}<inlineCode parentName=\"p\">{`tkn task start`}</inlineCode>{` you could also use yaml TaskRun, create a file `}<strong parentName=\"p\">{`taskrun.yaml`}</strong></p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-yaml\"\n          }}>{`apiVersion: tekton.dev/v1beta1\nkind: TaskRun\nmetadata:\n  generateName: buildah-task-run-\nspec:\n  serviceAccountName: pipeline\n  taskRef:\n    name: buildah\n  params:\n    - name: url\n      value: https://github.com/ibm-cloud-architecture/cloudnative_sample_app\n    - name: image\n      value: image-registry.openshift-image-registry.svc:5000/tekton-demo/cloudnative_sample_app\n`}</code></pre>\n        <p parentName=\"li\">{`  Then create the TaskRun with `}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-bash\"\n          }}>{`oc create -f taskrun-buildah.yaml -n $NAMESPACE\n`}</code></pre>\n        <p parentName=\"li\">{`  Follow the logs with:`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{}}>{`tkn tr logs -f -n $NAMESPACE\n`}</code></pre>\n      </li>\n    </ul>\n    <h2>{`Pipelines`}</h2>\n    <h3>{`Pipeline Creation`}</h3>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Pipelines allows to start multiple Tasks, in parallel or in a `}<a parentName=\"p\" {...{\n            \"href\": \"https://github.com/tektoncd/pipeline/blob/master/docs/pipelines.md#runafter\"\n          }}>{`certain order`}</a></p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Create the file `}<strong parentName=\"p\">{`pipeline.yaml`}</strong>{`, the Pipeline contains two Tasks`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-yaml\"\n          }}>{`apiVersion: tekton.dev/v1beta1\nkind: Pipeline\nmetadata:\n  name: test-build\nspec:\n  params:\n    - name: repo-url\n      default: https://github.com/ibm-cloud-architecture/cloudnative_sample_app\n    - name: revision\n      default: master\n    - name: image-server\n      default: image-registry.openshift-image-registry.svc:5000\n    - name: image-namespace\n      default: tekton-demo\n    - name: image-repository\n      default: cloudnative_sample_app\n  tasks:\n    - name: test\n      taskRef:\n        name: java-test\n      params:\n        - name: url\n          value: $(params.repo-url)\n        - name: revision\n          value: $(params.revision)\n    - name: build\n      runAfter: [test]\n      taskRef:\n        name: buildah\n      params:\n        - name: image\n          value: $(params.image-server)/$(params.image-namespace)/$(params.image-repository)\n        - name: url\n          value: $(params.repo-url)\n        - name: revision\n          value: $(params.revision)\n`}</code></pre>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Pipeline defines a list of Tasks to execute in order, while also indicating if any outputs should be used as inputs of a following Task by using the from field and also indicating the order of executing (using the runAfter and from fields). The same variable substitution you used in Tasks is also available in a Pipeline.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Create the Pipeline using the command:`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-bash\"\n          }}>{`oc apply -f pipeline.yaml -n $NAMESPACE\n`}</code></pre>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Use the Tekton cli to inspect the created resources`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-bash\"\n          }}>{`tkn pipeline ls -n $NAMESPACE\n`}</code></pre>\n        <p parentName=\"li\">{`The above command should list one Pipeline as shown below:`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-bash\"\n          }}>{`NAME              AGE              LAST RUN   STARTED   DURATION   STATUS\ntest-build-push   31 seconds ago   ---        ---       ---        ---\n`}</code></pre>\n      </li>\n    </ul>\n    <h3>{`PipelineRun`}</h3>\n    <h4>{`PipelineRun Creation`}</h4>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`To execute the Tasks in the Pipeline, you must create a PipelineRun. Creation of a PipelineRun will trigger the creation of TaskRuns for each Task in your pipeline.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Create the file `}<strong parentName=\"p\">{`pipelinerun.yaml`}</strong></p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-yaml\"\n          }}>{`apiVersion: tekton.dev/v1alpha1\nkind: PipelineRun\nmetadata:\n  generateName: test-build-run-\nspec:\n  serviceAccountName: pipeline\n  pipelineRef:\n    name: test-build\n  params:\n    - name: image-server\n      value: image-registry.openshift-image-registry.svc:5000\n    - name: image-namespace\n      value: tekton-demo\n`}</code></pre>\n        <p parentName=\"li\">{`  `}<strong parentName=\"p\">{`serviceAccount`}</strong>{` - it is always recommended to have a service account associated with PipelineRun, which can then be used to define fine grained roles.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Create the PipelineRun using the command:`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-bash\"\n          }}>{`oc create -f pipelinerun.yaml -n $NAMESPACE\n`}</code></pre>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`We will use the Tekton cli to inspect the created resources`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-bash\"\n          }}>{`tkn pipelinerun ls -n $NAMESPACE\n`}</code></pre>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`The above command should list one PipelineRun as shown below:`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-bash\"\n          }}>{`NAME                        STARTED         DURATION   STATUS\ntest-build-push-run-c7zgv   8 seconds ago   ---        Running\n`}</code></pre>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Wait for few minutes for your pipeline to complete all the tasks. If it is successful, you will see something like below.`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-bash\"\n          }}>{`tkn pipeline ls -n $NAMESPACE\n`}</code></pre>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{}}>{`NAME              AGE              LAST RUN                    STARTED         DURATION    STATUS\ntest-build-push   33 minutes ago   test-build-push-run-c7zgv   2 minutes ago   2 minutes   Succeeded\n`}</code></pre>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Run again the pipeline ls command`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-bash\"\n          }}>{`tkn pipelinerun ls -n $NAMESPACE\n`}</code></pre>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{}}>{`NAME                        STARTED         DURATION    STATUS\ntest-build-push-run-c7zgv   2 minutes ago   2 minutes   Succeeded\n`}</code></pre>\n        <p parentName=\"li\">{`  If it is successful, go to your container registry account and verify if you have the `}<inlineCode parentName=\"p\">{`cloudnative_sample_app`}</inlineCode>{` image pushed.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`(Optional) Run the pipeline again using the `}<inlineCode parentName=\"p\">{`tkn`}</inlineCode>{` CLI`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-bash\"\n          }}>{`tkn pipeline start test-build --showlog \\\\\n  -s pipeline \\\\\n  -n $NAMESPACE\n`}</code></pre>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`(Optional) Re-run the pipeline using last pipelinerun values`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-bash\"\n          }}>{`tkn pipeline start test-build-push --last -n $NAMESPACE\n`}</code></pre>\n      </li>\n    </ul>\n    <h2>{`Deploy Application`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Create a deployment`}\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-bash\"\n          }}>{`oc create deployment cloudnative --image=\\${IMAGE_URL} -n $NAMESPACE\n`}</code></pre>\n      </li>\n      <li parentName=\"ul\">{`Verify if the pods are running:`}\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-bash\"\n          }}>{`oc get pods -l app=cloudnative -n $NAMESPACE\n`}</code></pre>\n      </li>\n      <li parentName=\"ul\">{`Expose the deployment as a service`}\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-bash\"\n          }}>{`oc expose deployment cloudnative --port=9080 -n $NAMESPACE\n`}</code></pre>\n      </li>\n      <li parentName=\"ul\">{`Expose the service as a route`}\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-bash\"\n          }}>{`oc expose service cloudnative -n $NAMESPACE\n`}</code></pre>\n      </li>\n      <li parentName=\"ul\">{`Now access the compose the URL of the App using IP and NodePort`}\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-bash\"\n          }}>{`export APP_URL=\"$(oc get route cloudnative --template 'http://{{.spec.host}}')/greeting?name=Carlos\"\necho APP_URL=$APP_URL\n`}</code></pre>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{}}>{`http://cloudnative-tekton-demo.apps-crc.testing/greeting?name=Carlos\n`}</code></pre>\n      </li>\n      <li parentName=\"ul\">{`Now access the app from terminal or browser`}\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-bash\"\n          }}>{`curl $APP_URL\n`}</code></pre>\n        {`  Output should be`}\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-json\"\n          }}>{`{\"id\":4,\"content\":\"Welcome to Cloudnative bootcamp !!! Hello, Carlos :)\"}\n`}</code></pre>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-bash\"\n          }}>{`open $APP_URL\n`}</code></pre>\n      </li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}