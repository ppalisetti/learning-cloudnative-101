(window.webpackJsonp=window.webpackJsonp||[]).push([[108],{"013z":function(e,n,t){"use strict";var a=t("q1tI"),o=t.n(a),c=t("NmYn"),r=t.n(c),b=t("Wbzz"),l=t("Xrax"),i=t("k4MR"),s=t("TSYQ"),p=t.n(s),d=t("QH2O"),m=t.n(d),u=t("qKvR"),j=function(e){var n,t=e.title,a=e.theme,o=e.tabs,c=void 0===o?[]:o;return Object(u.b)("div",{className:p()(m.a.pageHeader,(n={},n[m.a.withTabs]=c.length,n[m.a.darkMode]="dark"===a,n))},Object(u.b)("div",{className:"bx--grid"},Object(u.b)("div",{className:"bx--row"},Object(u.b)("div",{className:"bx--col-lg-12"},Object(u.b)("h1",{id:"page-title",className:m.a.text},t)))))},O=t("BAC9"),g=function(e){var n=e.relativePagePath,t=e.repository,a=Object(b.useStaticQuery)("1364590287").site.siteMetadata.repository,o=t||a,c=o.baseUrl,r=o.subDirectory,l=c+"/edit/"+o.branch+r+"/src/pages"+n;return c?Object(u.b)("div",{className:"bx--row "+O.row},Object(u.b)("div",{className:"bx--col"},Object(u.b)("a",{className:O.link,href:l},"Edit this page on GitHub"))):null},v=t("FCXl"),y=t("dI71"),h=t("I8xM"),x=function(e){function n(){return e.apply(this,arguments)||this}return Object(y.a)(n,e),n.prototype.render=function(){var e=this.props,n=e.tabs,t=e.slug,a=t.split("/").filter(Boolean).slice(-1)[0],o=n.map((function(e){var n,o=r()(e,{lower:!0,strict:!0}),c=o===a,l=new RegExp(a+"/?(#.*)?$"),i=t.replace(l,o);return Object(u.b)("li",{key:e,className:p()((n={},n[h.selectedItem]=c,n),h.listItem)},Object(u.b)(b.Link,{className:h.link,to:""+i},e))}));return Object(u.b)("div",{className:h.tabsContainer},Object(u.b)("div",{className:"bx--grid"},Object(u.b)("div",{className:"bx--row"},Object(u.b)("div",{className:"bx--col-lg-12 bx--col-no-gutter"},Object(u.b)("nav",null,Object(u.b)("ul",{className:h.list},o))))))},n}(o.a.Component),k=t("MjG9"),f=t("CzIb");n.a=function(e){var n=e.pageContext,t=e.children,a=e.location,o=e.Title,c=n.frontmatter,s=void 0===c?{}:c,p=n.relativePagePath,d=n.titleType,m=s.tabs,O=s.title,y=s.theme,h=s.description,P=s.keywords,N=Object(f.a)().interiorTheme,T=Object(b.useStaticQuery)("2456312558").site.pathPrefix,w=T?a.pathname.replace(T,""):a.pathname,C=m?w.split("/").filter(Boolean).slice(-1)[0]||r()(m[0],{lower:!0}):"",I=y||N;return Object(u.b)(i.a,{tabs:m,homepage:!1,theme:I,pageTitle:O,pageDescription:h,pageKeywords:P,titleType:d},Object(u.b)(j,{title:o?Object(u.b)(o,null):O,label:"label",tabs:m,theme:I}),m&&Object(u.b)(x,{slug:w,tabs:m,currentTab:C}),Object(u.b)(k.a,{padded:!0},t,Object(u.b)(g,{relativePagePath:p})),Object(u.b)(v.a,{pageContext:n,location:a,slug:w,tabs:m,currentTab:C}),Object(u.b)(l.a,null))}},BAC9:function(e,n,t){e.exports={bxTextTruncateEnd:"EditLink-module--bx--text-truncate--end--2pqje",bxTextTruncateFront:"EditLink-module--bx--text-truncate--front--3_lIE",link:"EditLink-module--link--1qzW3",row:"EditLink-module--row--1B9Gk"}},I8xM:function(e,n,t){e.exports={bxTextTruncateEnd:"PageTabs-module--bx--text-truncate--end--267NA",bxTextTruncateFront:"PageTabs-module--bx--text-truncate--front--3xEQF",tabsContainer:"PageTabs-module--tabs-container--8N4k0",list:"PageTabs-module--list--3eFQc",listItem:"PageTabs-module--list-item--nUmtD",link:"PageTabs-module--link--1mDJ1",selectedItem:"PageTabs-module--selected-item--YPVr3"}},QH2O:function(e,n,t){e.exports={bxTextTruncateEnd:"PageHeader-module--bx--text-truncate--end--mZWeX",bxTextTruncateFront:"PageHeader-module--bx--text-truncate--front--3zvrI",pageHeader:"PageHeader-module--page-header--3hIan",darkMode:"PageHeader-module--dark-mode--hBrwL",withTabs:"PageHeader-module--with-tabs--3nKxA",text:"PageHeader-module--text--o9LFq"}},"Z/QB":function(e,n,t){"use strict";t.r(n),t.d(n,"_frontmatter",(function(){return b})),t.d(n,"default",(function(){return m}));var a=t("wx14"),o=t("zLVn"),c=(t("q1tI"),t("7ljp")),r=t("013z"),b=(t("qKvR"),{}),l=function(e){return function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),Object(c.b)("div",n)}},i=l("Accordion"),s=l("AccordionItem"),p={_frontmatter:b},d=r.a;function m(e){var n=e.components,t=Object(o.a)(e,["components"]);return Object(c.b)(d,Object(a.a)({},p,t,{components:n,mdxType:"MDXLayout"}),Object(c.b)("h1",null,"Solutions"),Object(c.b)(i,{mdxType:"Accordion"},Object(c.b)(s,{title:"Pod Creation",mdxType:"AccordionItem"},Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{}),'apiVersion: v1\nkind: Pod\nmetadata:\n  name: nginx\n  namespace: web\nspec:\n  containers:\n    - name: nginx\n      image: nginx\n      command: ["nginx"]\n      args: ["-g", "daemon off;", "-q"]\n      ports:\n      - containerPort: 80\n'))),Object(c.b)(s,{title:"Pod Configuration",mdxType:"AccordionItem"},Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{}),"kubectl create sa yoda-svc\n")),Object(c.b)("hr",null),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{}),"apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: yoda-service-config\ndata:\n  yoda.cfg: |-\n    yoda.baby.power=100000000\n    yoda.strength=10\n")),Object(c.b)("hr",null),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{}),"apiVersion: v1\nkind: Secret\nmetadata:\n  name: yoda-db-password\nstringData:\n  password: 0penSh1ftRul3s!\n")),Object(c.b)("hr",null),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{}),'apiVersion: v1\nkind: Pod\nmetadata:\n  name: yoda-service\nspec:\n  serviceAccountName: yoda-svc\n  containers:\n  - name: yoda-service\n    image: bitnami/nginx\n    volumeMounts:\n    - name: config-volume\n      mountPath: /etc/yoda-service\n    env:\n    - name: DB_PASSWORD\n      valueFrom:\n        secretKeyRef:\n          name: yoda-db-password\n          key: password\n    resources:\n      requests:\n        memory: "64Mi"\n        cpu: "250m"\n      limits:\n        memory: "128Mi"\n        cpu: "500m"\n  volumes:\n  - name: config-volume\n    configMap:\n      name: yoda-service-config\n'))),Object(c.b)(s,{title:"Multiple Containers",mdxType:"AccordionItem"},Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{}),"apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: vader-service-ambassador-config\ndata:\n  haproxy.cfg: |-\n    global\n        daemon\n        maxconn 256\n\n    defaults\n        mode http\n        timeout connect 5000ms\n        timeout client 50000ms\n        timeout server 50000ms\n\n    listen http-in\n        bind *:80\n        server server1 127.0.0.1:8989 maxconn 32\n")),Object(c.b)("hr",null),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{}),"apiVersion: v1\nkind: Pod\nmetadata:\n  name: vader-service\nspec:\n  containers:\n    - name: millennium-falcon\n      image: ibmcase/millennium-falcon:1\n    - name: haproxy-ambassador\n      image: haproxy:1.7\n      ports:\n      - containerPort: 80\n      volumeMounts:\n      - name: config-volume\n        mountPath: /usr/local/etc/haproxy\n  volumes:\n  - name: config-volume\n    configMap:\n      name: vader-service-ambassador-config\n")),Object(c.b)("hr",null),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{}),"apiVersion: v1\nkind: Pod\nmetadata:\n  name: busybox\nspec:\n  containers:\n    - name: myapp-container\n      image: radial/busyboxplus:curl\n      command: ['sh', '-c', 'while true; do sleep 3600; done']\n")),Object(c.b)("p",null,"   Check it with"),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{}),"kubectl exec busybox -- curl $(kubectl get pod vader-service -o=jsonpath='{.status.podIP}'):80\n"))),Object(c.b)(s,{title:"Probes",mdxType:"AccordionItem"},Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{}),"apiVersion: v1\nkind: Pod\nmetadata:\n  name: energy-shield-service\nspec:\n  containers:\n  - name: energy-shield\n    image: ibmcase/energy-shield:1\n    livenessProbe:\n      httpGet:\n        path: /healthz\n        port: 8080\n    readinessProbe:\n      httpGet:\n        path: /ready\n        port: 8080\n      initialDelaySeconds: 5\n"))),Object(c.b)(s,{title:"Debugging",mdxType:"AccordionItem"},Object(c.b)("p",null,"   Check ",Object(c.b)("inlineCode",{parentName:"p"},"STATUS")," column for not Ready"),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{}),"kubectl get pods --all-namespaces\n")),Object(c.b)("p",null,"   Check the description of the deployment"),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{}),"kubectl describe deployment hyper-drive\n")),Object(c.b)("p",null,"   Save logs for broken pod"),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{}),"kubectl logs <pod name> -n <namespace> > /home/cloud_user/debug/broken-pod-logs.log\n")),Object(c.b)("p",null,"   In the deploymentâ€™s description you will see the following is wrong:"),Object(c.b)("ul",null,Object(c.b)("li",null,"Selector and Label names do not match."),Object(c.b)("li",null,"The Probe is TCP instead of HTTP Get."),Object(c.b)("li",null,"The Service Port is 80 instead of 8080.")),"To fix probe, can't kubectl edit, need to delete and recreate the deployment",Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{}),"kubectl get deployment <deployment name> -n <namespace> -o yaml --export > hyper-drive.yml\n")),Object(c.b)("p",null,"   Delete pod"),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{}),"kubectl delete deployment <deployment name> -n <namespace>\n")),Object(c.b)("p",null,"   Edit yaml, and apply"),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{}),"kubectl apply -f hyper-drive.yml -n <namespace>\n")),Object(c.b)("p",null,"   Verify"),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{}),"kubectl get deployment <deployment name> -n <namespace>\n"))),Object(c.b)(s,{title:"Rolling Updates",mdxType:"AccordionItem"},Object(c.b)("p",null,"  Update the deployment to the new version like so:"),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{}),"kubectl set image deployment/jedi-deployment jedi-ws=bitnamy/nginx:1.18.1 --record\n")),Object(c.b)("p",null,"  Check the progress of the rolling update:"),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{}),"kubectl rollout status deployment/jedi-deployment\n")),Object(c.b)("p",null,"  In another terminal window"),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{}),"kubectl get pods -w\n")),Object(c.b)("p",null,"  Get a list of previous revisions."),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{}),"kubectl rollout history deployment/jedi-deployment\n")),Object(c.b)("p",null,"  Undo the last revision."),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{}),"kubectl rollout undo deployment/jedi-deployment\n")),Object(c.b)("p",null,"  Check the status of the rollout."),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{}),"kubectl rollout status deployment/jedi-deployment\n"))),Object(c.b)(s,{title:"Cron Jobs",mdxType:"AccordionItem"},Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{}),'apiVersion: batch/v1beta1\nkind: CronJob\nmetadata:\n  name: xwing-cronjob\nspec:\n  schedule: "*/1 * * * *"\n  jobTemplate:\n    spec:\n      template:\n        spec:\n          containers:\n          - name: xwing-status\n            image: ibmcase/xwing-status:1.0\n            args:\n            - /usr/sbin/xwing-status.sh\n          restartPolicy: OnFailure\n')),Object(c.b)("hr",null),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{}),"kubectl get cronjob xwing-cronjob\n"))),Object(c.b)(s,{title:"Services",mdxType:"AccordionItem"},Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{}),"apiVersion: v1\nkind: Service\nmetadata:\n    name: jedi-svc\nspec:\n    type: NodePort\n    selector:\n      app: jedi\n    ports:\n    - protocol: TCP\n        port: 80\n        targetPort: 8080\n")),Object(c.b)("hr",null),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{}),"apiVersion: v1\nkind: Service\nmetadata:\n  name: yoda-svc\nspec:\n  type: ClusterIP\n  selector:\n    app: yoda\n  ports:\n  - protocol: TCP\n      port: 80\n      targetPort: 8080\n"))),Object(c.b)(s,{title:"Persistent Volumes",mdxType:"AccordionItem"},Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{}),'    apiVersion: v1\n    kind: PersistentVolume\n    metadata:\n      name: postgresql-pv\n    spec:\n      storageClassName: localdisk\n      capacity:\n        storage: 1Gi\n      accessModes:\n        - ReadWriteOnce\n      hostPath:\n        path: "/mnt/data"\n')),Object(c.b)("hr",null),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{}),"    apiVersion: v1\n    kind: PersistentVolumeClaim\n    metadata:\n      name: postgresql-pv-claim\n    spec:\n      storageClassName: localdisk\n      accessModes:\n        - ReadWriteOnce\n      resources:\n        requests:\n          storage: 500Mi\n    \n")),Object(c.b)("hr",null),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{}),"    apiVersion: v1\n    kind: Pod\n    metadata:\n      name: postgresql-pod\n    spec:\n      containers:\n      - name: postgresql\n        image: bitnami/postgresql\n        ports:\n        - containerPort: 5432\n        env:\n        - name: MYSQL_ROOT_PASSWORD\n          value: password\n        volumeMounts:\n        - name: sql-storage\n          mountPath: /bitnami/postgresql/\n      volumes:\n      - name: sql-storage\n        persistentVolumeClaim:\n          claimName: postgresql-pv-claim\n    \n")),Object(c.b)("hr",null))))}m.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-lectures-kube-overview-activities-labs-solutions-index-mdx-a99d7ce7ccd32b22fece.js.map